Texture2D shaderTexture : register(t0);
SamplerState SampleType : register(s0);

cbuffer UtilBuffer: register(b0)
{
    float time;
    float texelSizeX;
    float texelSizeY;
    float pad4;
};

cbuffer FilterBuffer : register(b1)
{
    bool grainEnabled;
    bool monochromeEnabled;
    bool sharpnessEnabled;
    bool chromaticAbberationEnabled;

    bool vignetteEnabled;
    float vignetteStrength;
    float vignetteSmoothness;
    float pad;

    float sharpnessKernalN;
    float sharpnessKernalP;
    float sharpnessStrength;
    float grainIntensity;    
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

float rand(float2 co) // Could be replaced with a noise texture?
{
    return frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453);
}

float4 PS_MAIN(PixelInputType input) : SV_TARGET
{
    float4 color = shaderTexture.Sample(SampleType, input.tex);      

    if (grainEnabled)
    {
        color.rgb += (rand(input.tex + time * 0.001f) - 0.5f) * grainIntensity;
    }    

    if (sharpnessEnabled)
    {
        float n = sharpnessKernalN;
        float p = sharpnessKernalP;

        float3x3 kernel = float3x3(
            n, n, n,
            n, p, n,
            n, n, n
        );

        float2 texelSize = float2(texelSizeX, texelSizeY);
        float3 sharpenedColor = color.rgb;
        for (int i = -1; i <= 1; ++i)
        {
            for (int j = -1; j <= 1; ++j)
            {
                sharpenedColor += shaderTexture.Sample(SampleType, input.tex + float2(i, j) * texelSize).rgb * kernel[i + 1][j + 1];
            }
        }

        color.rgb = lerp(color.rgb, sharpenedColor, sharpnessStrength);
    }

    if (monochromeEnabled)
    {
        color.rgb = (color.r + color.g + color.b) / 3;    
    }    

    if (vignetteEnabled)
    {
        float a = length(input.tex - 0.5f) * vignetteStrength;
        a = smoothstep(1.0 - vignetteSmoothness, 1.0, a);
        return lerp(color, float4(0,0,0,1), saturate(a));   
    }    

    color.a = 1;
    return color;
}