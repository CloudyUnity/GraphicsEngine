#define BLUR_SAMPLE_SPREAD 4

Texture2D shaderTexture : register(t0);
SamplerState SampleType : register(s0);

cbuffer UtilBuffer: register(b0)
{
    float time;
    float texelSizeX;
    float texelSizeY;
    float pad4;
};

cbuffer BlurBuffer : register(b1)
{
    float blurMode;
    float3 bPad3;

    float4 weights[BLUR_SAMPLE_SPREAD];
}

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

float4 PS_MAIN(PixelInputType input) : SV_TARGET
{
    float4 color = float4(0,0,0,1);
    int i;

    float normalization = weights[0].x;
    for (i = 1; i < BLUR_SAMPLE_SPREAD - 1; i++)
    {
        normalization += 2 * weights[i].x;
    }

    if (blurMode <= -0.9f)
    {
        color = shaderTexture.Sample(SampleType, input.tex);
        color.a = 1;
        return color;
    }
    else if (blurMode <= 0.1f)
    {
        color += shaderTexture.Sample(SampleType, input.tex) * weights[0].x;

        for (i = 1; i < BLUR_SAMPLE_SPREAD; i++)
        {
            color += shaderTexture.Sample(SampleType, input.tex + float2(texelSizeX * -i, 0)) * weights[i].x;
            color += shaderTexture.Sample(SampleType, input.tex + float2(texelSizeX * i, 0)) * weights[i].x;
        }               

        color /= normalization;
    }
    else if (blurMode <= 1.1f)
    {
        color += shaderTexture.Sample(SampleType, input.tex) * weights[0].x;

        for (i = 1; i < BLUR_SAMPLE_SPREAD; i++)
        {
            color += shaderTexture.Sample(SampleType, input.tex + float2(0, texelSizeY * -i)) * weights[i].x;
            color += shaderTexture.Sample(SampleType, input.tex + float2(0, texelSizeY * i)) * weights[i].x;
        }               

        color /= normalization;
    }

    color.a = 1;

    return color;
}