Texture2D noiseTex : register(t0);
Texture2D fireTex : register(t1);
Texture2D flameTex : register(t2);
SamplerState SampleType : register(s0);

cbuffer UtilBuffer: register(b0)
{
    float time;
    float pad2;
    float pad3;
    float pad4;
};

cbuffer FireBuffer : register(b1)
{
    float2 distortion1;
    float2 distortion2;
    float2 distortion3;

    float distortionScale;
    float distortionBias;
}

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

float4 PS_MAIN(PixelInputType input) : SV_TARGET
{    
    float2 offset = input.tex;

    offset.y = input.tex.y + time * 0.11f;
    float4 n1 = noiseTex.SampleGrad(SampleType, frac(offset), ddx(offset), ddy(offset));    

    offset.y = input.tex.y + time * 0.32f;
    offset *= 2;
    float4 n2 = noiseTex.SampleGrad(SampleType, frac(offset), ddx(offset), ddy(offset));    

    offset.y = input.tex.y + time * 0.432f;
    offset *= 4;
    float4 n3 = noiseTex.SampleGrad(SampleType, frac(offset), ddx(offset), ddy(offset));    

    n1 = (n1 - 0.5f) * 2;    
    n2 = (n2 - 0.5f) * 2;    
    n3 = (n3 - 0.5f) * 2;

    n1.xy *= distortion1;
    n2.xy *= distortion2;
    n3.xy *= distortion3;

    float4 noise = n1 + n2 + n3;

    float perturb = ((input.tex.y) * distortionScale) + distortionBias;

    float2 noiseCoords = noise * perturb;
    noiseCoords.x += input.tex.x;
    noiseCoords.y += 1 - input.tex.y;

    // noiseCoords.y = 1 - noiseCoords.y;

    float4 fireCol = fireTex.Sample(SampleType, noiseCoords);
    float4 flame = flameTex.Sample(SampleType, noiseCoords);
    
    return float4(fireCol.rgb, flame.r);
}