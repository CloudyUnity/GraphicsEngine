#define SIN_COUNT 4

cbuffer MatrixBuffer : register(b0)
{
    matrix worldMatrix;
    matrix viewMatrix;
    matrix projectionMatrix;
};

cbuffer OceanSineBuffer : register(b1)
{
    float4 ampPhaseFreqXFreqZ[SIN_COUNT];
}

cbuffer UtilBuffer: register(b2)
{
    float time;
    float texelX;
    float texelY;
    float pad4;
};

cbuffer CameraBuffer : register(b3)
{
    float3 cameraPosition;
    float padding;
};

struct ConstantOutputType
{
    float edges[3] : SV_TessFactor;
    float inside : SV_InsideTessFactor;
};

struct DomainInputType
{
    float4 position : POSITION;
    float2 tex : TEXCOORD0;
};

struct PixelInputType
{
    float4 position : SV_POSITION0;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 viewDirection : TEXCOORD1;
};

[domain("tri")]

PixelInputType DS_MAIN(ConstantOutputType input, float3 uvwCoord : SV_DomainLocation, const OutputPatch<DomainInputType, 3> patch)
{
    float4 vertexPosition;
    PixelInputType output; 

    // Determine the position of the new vertex.
    vertexPosition = uvwCoord.x * patch[0].position + uvwCoord.y * patch[1].position + uvwCoord.z * patch[2].position;

    float ddx = 0;
    float ddz = 0;

    for (int i = 0; i < SIN_COUNT; i++)
    {
        float amp = ampPhaseFreqXFreqZ[i].x;
        float phase = ampPhaseFreqXFreqZ[i].y;
        float freqX = ampPhaseFreqXFreqZ[i].z;
        float freqZ = ampPhaseFreqXFreqZ[i].w;

        float offset = freqX * vertexPosition.x + freqZ * vertexPosition.z;

        vertexPosition.y += amp * sin(phase * time + offset);

        ddx += amp * freqX * cos(phase * time + offset);
        ddz += amp * freqZ * cos(phase * time + offset);
    }       
    
    float3 tangent = float3(1, 0, ddx);
    float3 binormal = float3(0, 1, ddz);
    output.normal = normalize(cross(binormal, tangent));
    // output.normal = mul(output.normal, (float3x3)worldMatrix);	
    // output.normal = normalize(output.normal);

    vertexPosition.w = 1.0f;
    
    // Calculate the position of the new vertex against the world, view, and projection matrices.
    output.position = mul(vertexPosition, worldMatrix);
    output.position = mul(output.position, viewMatrix);
    output.position = mul(output.position, projectionMatrix);

    output.tex = uvwCoord.x * patch[0].tex + uvwCoord.y * patch[1].tex + uvwCoord.z * patch[2].tex;

    float4 worldPosition = mul(vertexPosition, worldMatrix);
    output.viewDirection = normalize(cameraPosition.xyz - worldPosition.xyz);

    return output;
}