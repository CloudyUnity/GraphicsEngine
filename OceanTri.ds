#define SIN_COUNT 3

cbuffer MatrixBuffer : register(b0)
{
    matrix worldMatrix;
    matrix viewMatrix;
    matrix projectionMatrix;
};

cbuffer OceanSineBuffer : register(b1)
{
    float4 ampPhaseFreq[SIN_COUNT];
}

cbuffer UtilBuffer: register(b2)
{
    float time;
    float texelX;
    float texelY;
    float pad4;
};

cbuffer CameraBuffer : register(b3)
{
    float3 cameraPosition;
    float padding;
};

struct ConstantOutputType
{
    float edges[3] : SV_TessFactor;
    float inside : SV_InsideTessFactor;
};

struct DomainInputType
{
    float4 position : POSITION;
    float2 tex : TEXCOORD0;
};

struct PixelInputType
{
    float4 position : SV_POSITION0;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 viewDirection : TEXCOORD1;
};

[domain("tri")]

PixelInputType DS_MAIN(ConstantOutputType input, float3 uvwCoord : SV_DomainLocation, const OutputPatch<DomainInputType, 3> patch)
{
    float4 vertexPosition;
    PixelInputType output; 

    // Determine the position of the new vertex.
    vertexPosition = uvwCoord.x * patch[0].position + uvwCoord.y * patch[1].position + uvwCoord.z * patch[2].position;
    vertexPosition.w = 1.0f;
    float4 worldPosition = mul(vertexPosition, worldMatrix);

    float ddx = 0;
    float ddz = 0;

    float2 D = float2(1, 1);
    float align = dot(D, worldPosition.xz);

    // Debug
    float t = time;

    for (int i = 0; i < SIN_COUNT; i++)
    {
        float amp = ampPhaseFreq[i].x;
        float phase = ampPhaseFreq[i].y;
        float freq = ampPhaseFreq[i].z;

        vertexPosition.y += amp * sin(phase * t + align * freq);

        ddx += amp * freq * D.x * cos(phase * t + align * freq);
        ddz += amp * freq * D.y * cos(phase * t + align * freq);
    }       
    
    output.normal = float3(-ddx, 1, -ddz);
    output.normal = normalize(output.normal);    
    
    // Calculate the position of the new vertex against the world, view, and projection matrices.
    output.position = mul(vertexPosition, worldMatrix);
    output.position = mul(output.position, viewMatrix);
    output.position = mul(output.position, projectionMatrix);

    output.tex = uvwCoord.x * patch[0].tex + uvwCoord.y * patch[1].tex + uvwCoord.z * patch[2].tex;
    
    output.viewDirection = normalize(cameraPosition.xyz - worldPosition.xyz);

    return output;
}