#define NUM_LIGHTS 4
#define NUM_POISSON_SAMPLES 4

TextureCube cubemap : register(t0);
SamplerState SampleType : register(s0);

cbuffer UtilBuffer: register(b0)
{
    float time;
    float texelX;
    float texelY;
    float pad4;
};

cbuffer LightBuffer : register(b2)
{
    float4 ambientColor;
    float4 diffuseDirColor;
    float3 lightDirection;
    float specularPower;
    float4 specularColor;
};

struct PixelInputType
{
    float4 position : SV_POSITION0;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;   
    float3 viewDirection : TEXCOORD1;
};

float4 PS_MAIN(PixelInputType input) : SV_TARGET
{   
    float4 colorSum = ambientColor;
    float3 reflection;
    float4 specular;
    float4 cubemapColor;

    float3 reflect = 2 * input.normal * dot(input.normal, input.viewDirection) - input.viewDirection;
    reflect = normalize(reflect);
    cubemapColor = cubemap.Sample(SampleType, reflect);
    cubemapColor.a = 1;

    float fresnel = pow(1 - dot(input.viewDirection, input.normal), 5);

    float intensity = saturate(dot(input.normal, -lightDirection));

    if(intensity > 0.0f)
    {        
        colorSum += diffuseDirColor * intensity;
        float3 reflection = normalize(2.0f * intensity * input.normal + lightDirection); 
        float4 specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
        colorSum += specular * specularColor * fresnel;
    }
    
    float4 finalColor = lerp(saturate(colorSum), cubemapColor, fresnel);
    return float4(saturate(finalColor.rgb), 1);
}